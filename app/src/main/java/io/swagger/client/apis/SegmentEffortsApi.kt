/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.DetailedSegmentEffort
import io.swagger.client.models.Fault

import io.swagger.client.infrastructure.*

class SegmentEffortsApi(basePath: kotlin.String = "https://www.strava.com/api/v3") : ApiClient(basePath) {

    /**
     * List Segment Efforts
     * Returns a set of the authenticated athlete&#x27;s segment efforts for a given segment.
     * @param segmentId The identifier of the segment. 
     * @param startDateLocal ISO 8601 formatted date time. (optional)
     * @param endDateLocal ISO 8601 formatted date time. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @return kotlin.Array<DetailedSegmentEffort>
     */
    @Suppress("UNCHECKED_CAST")
    fun getEffortsBySegmentId(segmentId: kotlin.Int, startDateLocal: java.time.LocalDateTime? = null, endDateLocal: java.time.LocalDateTime? = null, perPage: kotlin.Int? = null): kotlin.Array<DetailedSegmentEffort> {
        val localVariableQuery: MultiValueMap = mapOf("segment_id" to listOf("$segmentId"), "start_date_local" to listOf("$startDateLocal"), "end_date_local" to listOf("$endDateLocal"), "per_page" to listOf("$perPage"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/segment_efforts", query = localVariableQuery
        )
        val response = request<kotlin.Array<DetailedSegmentEffort>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DetailedSegmentEffort>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Segment Effort
     * Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
     * @param id The identifier of the segment effort. 
     * @return DetailedSegmentEffort
     */
    @Suppress("UNCHECKED_CAST")
    fun getSegmentEffortById(id: kotlin.Long): DetailedSegmentEffort {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/segment_efforts/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<DetailedSegmentEffort>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailedSegmentEffort
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
