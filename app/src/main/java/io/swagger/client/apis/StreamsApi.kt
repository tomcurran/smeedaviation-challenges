/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Fault
import io.swagger.client.models.StreamSet

import io.swagger.client.infrastructure.*

class StreamsApi(basePath: kotlin.String = "https://www.strava.com/api/v3") : ApiClient(basePath) {

    /**
     * Get Activity Streams
     * Returns the given activity&#x27;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
     * @param id The identifier of the activity. 
     * @param keys Desired stream types. 
     * @param keyByType Must be true. 
     * @return StreamSet
     */
    @Suppress("UNCHECKED_CAST")
    fun getActivityStreams(id: kotlin.Long, keys: kotlin.Array<kotlin.String>, keyByType: kotlin.Boolean): StreamSet {
        val localVariableQuery: MultiValueMap = mapOf("keys" to toMultiValue(keys.toList(), "csv"), "key_by_type" to listOf("$keyByType"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/activities/{id}/streams".replace("{" + "id" + "}", "$id"), query = localVariableQuery
        )
        val response = request<StreamSet>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as StreamSet
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Route Streams
     * Returns the given route&#x27;s streams. Requires read_all scope for private routes.
     * @param id The identifier of the route. 
     * @return StreamSet
     */
    @Suppress("UNCHECKED_CAST")
    fun getRouteStreams(id: kotlin.Long): StreamSet {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/routes/{id}/streams".replace("{" + "id" + "}", "$id")
        )
        val response = request<StreamSet>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as StreamSet
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Segment Effort Streams
     * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
     * @param id The identifier of the segment effort. 
     * @param keys The types of streams to return. 
     * @param keyByType Must be true. 
     * @return StreamSet
     */
    @Suppress("UNCHECKED_CAST")
    fun getSegmentEffortStreams(id: kotlin.Long, keys: kotlin.Array<kotlin.String>, keyByType: kotlin.Boolean): StreamSet {
        val localVariableQuery: MultiValueMap = mapOf("keys" to toMultiValue(keys.toList(), "csv"), "key_by_type" to listOf("$keyByType"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/segment_efforts/{id}/streams".replace("{" + "id" + "}", "$id"), query = localVariableQuery
        )
        val response = request<StreamSet>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as StreamSet
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Segment Streams
     * Returns the given segment&#x27;s streams. Requires read_all scope for private segments.
     * @param id The identifier of the segment. 
     * @param keys The types of streams to return. 
     * @param keyByType Must be true. 
     * @return StreamSet
     */
    @Suppress("UNCHECKED_CAST")
    fun getSegmentStreams(id: kotlin.Long, keys: kotlin.Array<kotlin.String>, keyByType: kotlin.Boolean): StreamSet {
        val localVariableQuery: MultiValueMap = mapOf("keys" to toMultiValue(keys.toList(), "csv"), "key_by_type" to listOf("$keyByType"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/segments/{id}/streams".replace("{" + "id" + "}", "$id"), query = localVariableQuery
        )
        val response = request<StreamSet>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as StreamSet
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
