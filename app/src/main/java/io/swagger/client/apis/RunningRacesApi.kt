/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Fault
import io.swagger.client.models.RunningRace

import io.swagger.client.infrastructure.*

class RunningRacesApi(basePath: kotlin.String = "https://www.strava.com/api/v3") : ApiClient(basePath) {

    /**
     * Get Running Race
     * Returns a running race for a given identifier.
     * @param id The identifier of the running race. 
     * @return RunningRace
     */
    @Suppress("UNCHECKED_CAST")
    fun getRunningRaceById(id: kotlin.Int): RunningRace {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/running_races/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<RunningRace>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RunningRace
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List Running Races
     * Returns a list running races based on a set of search criteria.
     * @param year Filters the list by a given year. (optional)
     * @return kotlin.Array<RunningRace>
     */
    @Suppress("UNCHECKED_CAST")
    fun getRunningRaces(year: kotlin.Int? = null): kotlin.Array<RunningRace> {
        val localVariableQuery: MultiValueMap = mapOf("year" to listOf("$year"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/running_races", query = localVariableQuery
        )
        val response = request<kotlin.Array<RunningRace>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<RunningRace>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
