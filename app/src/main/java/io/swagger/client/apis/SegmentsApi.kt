/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.DetailedSegment
import io.swagger.client.models.ExplorerResponse
import io.swagger.client.models.Fault
import io.swagger.client.models.SummarySegment

import io.swagger.client.infrastructure.*

class SegmentsApi(basePath: kotlin.String = "https://www.strava.com/api/v3") : ApiClient(basePath) {

    /**
     * Explore segments
     * Returns the top 10 segments matching a specified query.
     * @param bounds The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude] 
     * @param activityType Desired activity type. (optional)
     * @param minCat The minimum climbing category. (optional)
     * @param maxCat The maximum climbing category. (optional)
     * @return ExplorerResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun exploreSegments(bounds: kotlin.Array<kotlin.Float>, activityType: kotlin.String? = null, minCat: kotlin.Int? = null, maxCat: kotlin.Int? = null): ExplorerResponse {
        val localVariableQuery: MultiValueMap = mapOf("bounds" to toMultiValue(bounds.toList(), "csv"), "activity_type" to listOf("$activityType"), "min_cat" to listOf("$minCat"), "max_cat" to listOf("$maxCat"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/segments/explore", query = localVariableQuery
        )
        val response = request<ExplorerResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ExplorerResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List Starred Segments
     * List of the authenticated athlete&#x27;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
     * @param page Page number. Defaults to 1. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @return kotlin.Array<SummarySegment>
     */
    @Suppress("UNCHECKED_CAST")
    fun getLoggedInAthleteStarredSegments(page: kotlin.Int? = null, perPage: kotlin.Int? = null): kotlin.Array<SummarySegment> {
        val localVariableQuery: MultiValueMap = mapOf("page" to listOf("$page"), "per_page" to listOf("$perPage"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/segments/starred", query = localVariableQuery
        )
        val response = request<kotlin.Array<SummarySegment>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SummarySegment>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Segment
     * Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
     * @param id The identifier of the segment. 
     * @return DetailedSegment
     */
    @Suppress("UNCHECKED_CAST")
    fun getSegmentById(id: kotlin.Long): DetailedSegment {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/segments/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<DetailedSegment>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailedSegment
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Star Segment
     * Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
     * @param starred  
     * @param id The identifier of the segment to star. 
     * @return DetailedSegment
     */
    @Suppress("UNCHECKED_CAST")
    fun starSegment(starred: kotlin.Boolean, id: kotlin.Long): DetailedSegment {
        val localVariableBody: kotlin.Any? = mapOf("starred" to "$starred")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/segments/{id}/starred".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<DetailedSegment>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailedSegment
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
