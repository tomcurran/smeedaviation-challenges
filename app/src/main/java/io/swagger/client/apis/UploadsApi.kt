/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Fault
import io.swagger.client.models.Upload

import io.swagger.client.infrastructure.*

class UploadsApi(basePath: kotlin.String = "https://www.strava.com/api/v3") : ApiClient(basePath) {

    /**
     * Upload Activity
     * Uploads a new data file to create an activity from. Requires activity:write scope.
     * @param file  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param trainer  (optional)
     * @param commute  (optional)
     * @param dataType  (optional)
     * @param externalId  (optional)
     * @return Upload
     */
    @Suppress("UNCHECKED_CAST")
    fun createUpload(file: kotlin.Array<kotlin.Byte>? = null, name: kotlin.String? = null, description: kotlin.String? = null, trainer: kotlin.String? = null, commute: kotlin.String? = null, dataType: kotlin.String? = null, externalId: kotlin.String? = null): Upload {
        val localVariableBody: kotlin.Any? = mapOf("file" to "$file", "name" to "$name", "description" to "$description", "trainer" to "$trainer", "commute" to "$commute", "data_type" to "$dataType", "external_id" to "$externalId")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/uploads", headers = localVariableHeaders
        )
        val response = request<Upload>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Upload
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Upload
     * Returns an upload for a given identifier. Requires activity:write scope.
     * @param uploadId The identifier of the upload. 
     * @return Upload
     */
    @Suppress("UNCHECKED_CAST")
    fun getUploadById(uploadId: kotlin.Long): Upload {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/uploads/{uploadId}".replace("{" + "uploadId" + "}", "$uploadId")
        )
        val response = request<Upload>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Upload
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
