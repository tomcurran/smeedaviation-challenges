/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models


/**
 * 
 * @param id The unique identifier of this race.
 * @param name The name of this race.
 * @param runningRaceType The type of this race.
 * @param distance The race's distance, in meters.
 * @param startDateLocal The time at which the race begins started in the local timezone.
 * @param city The name of the city in which the race is taking place.
 * @param state The name of the state or geographical region in which the race is taking place.
 * @param country The name of the country in which the race is taking place.
 * @param routeIds The set of routes that cover this race's course.
 * @param measurementPreference The unit system in which the race should be displayed.
 * @param url The vanity URL of this race on Strava.
 * @param websiteUrl The URL of this race's website.
 */
data class RunningRace (

    /* The unique identifier of this race. */
    val id: kotlin.Int? = null,
    /* The name of this race. */
    val name: kotlin.String? = null,
    /* The type of this race. */
    val runningRaceType: kotlin.Int? = null,
    /* The race's distance, in meters. */
    val distance: kotlin.Float? = null,
    /* The time at which the race begins started in the local timezone. */
    val startDateLocal: java.time.LocalDateTime? = null,
    /* The name of the city in which the race is taking place. */
    val city: kotlin.String? = null,
    /* The name of the state or geographical region in which the race is taking place. */
    val state: kotlin.String? = null,
    /* The name of the country in which the race is taking place. */
    val country: kotlin.String? = null,
    /* The set of routes that cover this race's course. */
    val routeIds: kotlin.Array<kotlin.Int>? = null,
    /* The unit system in which the race should be displayed. */
    val measurementPreference: RunningRace.MeasurementPreference? = null,
    /* The vanity URL of this race on Strava. */
    val url: kotlin.String? = null,
    /* The URL of this race's website. */
    val websiteUrl: kotlin.String? = null
) {
    /**
    * The unit system in which the race should be displayed.
    * Values: feet,meters
    */
    enum class MeasurementPreference(val value: kotlin.String){
        feet("feet"),
        meters("meters");
    }
}