/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

import io.swagger.client.models.SummaryAthlete
import io.swagger.client.models.SummaryClub
import io.swagger.client.models.SummaryGear

/**
 * 
 * @param followerCount The athlete's follower count.
 * @param friendCount The athlete's friend count.
 * @param measurementPreference The athlete's preferred unit system.
 * @param ftp The athlete's FTP (Functional Threshold Power).
 * @param weight The athlete's weight.
 * @param clubs The athlete's clubs.
 * @param bikes The athlete's bikes.
 * @param shoes The athlete's shoes.
 */
data class DetailedAthlete (

    /* The athlete's follower count. */
    val followerCount: kotlin.Int? = null,
    /* The athlete's friend count. */
    val friendCount: kotlin.Int? = null,
    /* The athlete's preferred unit system. */
    val measurementPreference: DetailedAthlete.MeasurementPreference? = null,
    /* The athlete's FTP (Functional Threshold Power). */
    val ftp: kotlin.Int? = null,
    /* The athlete's weight. */
    val weight: kotlin.Float? = null,
    /* The athlete's clubs. */
    val clubs: kotlin.Array<SummaryClub>? = null,
    /* The athlete's bikes. */
    val bikes: kotlin.Array<SummaryGear>? = null,
    /* The athlete's shoes. */
    val shoes: kotlin.Array<SummaryGear>? = null,
    /* Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\" */
    val resourceState: kotlin.Int? = null,
    /* The athlete's first name. */
    val firstname: kotlin.String? = null,
    /* The athlete's last name. */
    val lastname: kotlin.String? = null,
    /* URL to a 62x62 pixel profile picture. */
    val profileMedium: kotlin.String? = null,
    /* URL to a 124x124 pixel profile picture. */
    val profile: kotlin.String? = null,
    /* The athlete's city. */
    val city: kotlin.String? = null,
    /* The athlete's state or geographical region. */
    val state: kotlin.String? = null,
    /* The athlete's country. */
    val country: kotlin.String? = null,
    /* The athlete's sex. */
    val sex: DetailedAthlete.Sex? = null,
    /* Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription. */
    val premium: kotlin.Boolean? = null,
    /* Whether the athlete has any Summit subscription. */
    val summit: kotlin.Boolean? = null,
    /* The time at which the athlete was created. */
    val createdAt: java.time.LocalDateTime? = null,
    /* The time at which the athlete was last updated. */
    val updatedAt: java.time.LocalDateTime? = null,
    /* The athlete's follower count. */
    val followerCount: kotlin.Int? = null,
    /* The athlete's friend count. */
    val friendCount: kotlin.Int? = null,
    /* The athlete's preferred unit system. */
    val measurementPreference: DetailedAthlete.MeasurementPreference? = null,
    /* The athlete's FTP (Functional Threshold Power). */
    val ftp: kotlin.Int? = null,
    /* The athlete's weight. */
    val weight: kotlin.Float? = null,
    /* The athlete's clubs. */
    val clubs: kotlin.Array<SummaryClub>? = null,
    /* The athlete's bikes. */
    val bikes: kotlin.Array<SummaryGear>? = null,
    /* The athlete's shoes. */
    val shoes: kotlin.Array<SummaryGear>? = null
) {
    /**
    * The athlete's preferred unit system.
    * Values: feet,meters
    */
    enum class MeasurementPreference(val value: kotlin.String){
        feet("feet"),
        meters("meters");
    }
}