/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

import io.swagger.client.models.AltitudeStream
import io.swagger.client.models.CadenceStream
import io.swagger.client.models.DistanceStream
import io.swagger.client.models.HeartrateStream
import io.swagger.client.models.LatLngStream
import io.swagger.client.models.MovingStream
import io.swagger.client.models.PowerStream
import io.swagger.client.models.SmoothGradeStream
import io.swagger.client.models.SmoothVelocityStream
import io.swagger.client.models.TemperatureStream
import io.swagger.client.models.TimeStream

/**
 * 
 * @param time 
 * @param distance 
 * @param latlng 
 * @param altitude 
 * @param velocitySmooth 
 * @param heartrate 
 * @param cadence 
 * @param watts 
 * @param temp 
 * @param moving 
 * @param gradeSmooth 
 */
data class StreamSet (

    val time: TimeStream? = null,
    val distance: DistanceStream? = null,
    val latlng: LatLngStream? = null,
    val altitude: AltitudeStream? = null,
    val velocitySmooth: SmoothVelocityStream? = null,
    val heartrate: HeartrateStream? = null,
    val cadence: CadenceStream? = null,
    val watts: PowerStream? = null,
    val temp: TemperatureStream? = null,
    val moving: MovingStream? = null,
    val gradeSmooth: SmoothGradeStream? = null
) {
}