/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

import io.swagger.client.models.SummaryClub

/**
 * 
 * @param membership The membership status of the logged-in athlete.
 * @param admin Whether the currently logged-in athlete is an administrator of this club.
 * @param owner Whether the currently logged-in athlete is the owner of this club.
 * @param followingCount The number of athletes in the club that the logged-in athlete follows.
 */
data class DetailedClub (

    /* The membership status of the logged-in athlete. */
    val membership: DetailedClub.Membership? = null,
    /* Whether the currently logged-in athlete is an administrator of this club. */
    val admin: kotlin.Boolean? = null,
    /* Whether the currently logged-in athlete is the owner of this club. */
    val owner: kotlin.Boolean? = null,
    /* The number of athletes in the club that the logged-in athlete follows. */
    val followingCount: kotlin.Int? = null,
    /* URL to a 60x60 pixel profile picture. */
    val profileMedium: kotlin.String? = null,
    /* URL to a ~1185x580 pixel cover photo. */
    val coverPhoto: kotlin.String? = null,
    /* URL to a ~360x176  pixel cover photo. */
    val coverPhotoSmall: kotlin.String? = null,
    val sportType: DetailedClub.SportType? = null,
    /* The club's city. */
    val city: kotlin.String? = null,
    /* The club's state or geographical region. */
    val state: kotlin.String? = null,
    /* The club's country. */
    val country: kotlin.String? = null,
    /* Whether the club is private. */
    val `private`: kotlin.Boolean? = null,
    /* The club's member count. */
    val memberCount: kotlin.Int? = null,
    /* Whether the club is featured or not. */
    val featured: kotlin.Boolean? = null,
    /* Whether the club is verified or not. */
    val verified: kotlin.Boolean? = null,
    /* The club's vanity URL. */
    val url: kotlin.String? = null,
    /* The membership status of the logged-in athlete. */
    val membership: DetailedClub.Membership? = null,
    /* Whether the currently logged-in athlete is an administrator of this club. */
    val admin: kotlin.Boolean? = null,
    /* Whether the currently logged-in athlete is the owner of this club. */
    val owner: kotlin.Boolean? = null,
    /* The number of athletes in the club that the logged-in athlete follows. */
    val followingCount: kotlin.Int? = null
) {
    /**
    * The membership status of the logged-in athlete.
    * Values: member,pending
    */
    enum class Membership(val value: kotlin.String){
        member("member"),
        pending("pending");
    }
}