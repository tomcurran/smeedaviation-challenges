/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

import io.swagger.client.models.LatLng
import io.swagger.client.models.PolylineMap
import io.swagger.client.models.SummarySegment
import io.swagger.client.models.SummarySegmentEffort

/**
 * 
 * @param createdAt The time at which the segment was created.
 * @param updatedAt The time at which the segment was last updated.
 * @param totalElevationGain The segment's total elevation gain.
 * @param map 
 * @param effortCount The total number of efforts for this segment
 * @param athleteCount The number of unique athletes who have an effort for this segment
 * @param hazardous Whether this segment is considered hazardous
 * @param starCount The number of stars for this segment
 */
data class DetailedSegment (

    /* The time at which the segment was created. */
    val createdAt: java.time.LocalDateTime? = null,
    /* The time at which the segment was last updated. */
    val updatedAt: java.time.LocalDateTime? = null,
    /* The segment's total elevation gain. */
    val totalElevationGain: kotlin.Float? = null,
    val map: PolylineMap? = null,
    /* The total number of efforts for this segment */
    val effortCount: kotlin.Int? = null,
    /* The number of unique athletes who have an effort for this segment */
    val athleteCount: kotlin.Int? = null,
    /* Whether this segment is considered hazardous */
    val hazardous: kotlin.Boolean? = null,
    /* The number of stars for this segment */
    val starCount: kotlin.Int? = null,
    /* The unique identifier of this segment */
    val id: kotlin.Long? = null,
    /* The name of this segment */
    val name: kotlin.String? = null,
    val activityType: DetailedSegment.ActivityType? = null,
    /* The segment's distance, in meters */
    val distance: kotlin.Float? = null,
    /* The segment's average grade, in percents */
    val averageGrade: kotlin.Float? = null,
    /* The segments's maximum grade, in percents */
    val maximumGrade: kotlin.Float? = null,
    /* The segments's highest elevation, in meters */
    val elevationHigh: kotlin.Float? = null,
    /* The segments's lowest elevation, in meters */
    val elevationLow: kotlin.Float? = null,
    val startLatlng: LatLng? = null,
    val endLatlng: LatLng? = null,
    /* The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. */
    val climbCategory: kotlin.Int? = null,
    /* The segments's city. */
    val city: kotlin.String? = null,
    /* The segments's state or geographical region. */
    val state: kotlin.String? = null,
    /* The segment's country. */
    val country: kotlin.String? = null,
    /* Whether this segment is private. */
    val `private`: kotlin.Boolean? = null,
    val athletePrEffort: SummarySegmentEffort? = null,
    /* The time at which the segment was created. */
    val createdAt: java.time.LocalDateTime? = null,
    /* The time at which the segment was last updated. */
    val updatedAt: java.time.LocalDateTime? = null,
    /* The segment's total elevation gain. */
    val totalElevationGain: kotlin.Float? = null,
    val map: PolylineMap? = null,
    /* The total number of efforts for this segment */
    val effortCount: kotlin.Int? = null,
    /* The number of unique athletes who have an effort for this segment */
    val athleteCount: kotlin.Int? = null,
    /* Whether this segment is considered hazardous */
    val hazardous: kotlin.Boolean? = null,
    /* The number of stars for this segment */
    val starCount: kotlin.Int? = null
) {
}