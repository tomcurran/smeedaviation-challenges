/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models


/**
 * 
 * @param name The name of the activity.
 * @param type Type of activity. For example - Run, Ride etc.
 * @param startDateLocal ISO 8601 formatted date time.
 * @param elapsedTime In seconds.
 * @param description Description of the activity.
 * @param distance In meters.
 * @param trainer Set to 1 to mark as a trainer activity.
 * @param commute Set to 1 to mark as commute.
 */
data class Body1 (
    /* The name of the activity. */
    val name: kotlin.String,
    /* Type of activity. For example - Run, Ride etc. */
    val type: kotlin.String,
    /* ISO 8601 formatted date time. */
    val startDateLocal: java.time.LocalDateTime,
    /* In seconds. */
    val elapsedTime: kotlin.Int
,
    /* Description of the activity. */
    val description: kotlin.String? = null,
    /* In meters. */
    val distance: kotlin.Float? = null,
    /* Set to 1 to mark as a trainer activity. */
    val trainer: kotlin.Int? = null,
    /* Set to 1 to mark as commute. */
    val commute: kotlin.Int? = null
) {
}