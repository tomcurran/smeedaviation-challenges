/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

import io.swagger.client.models.MetaAthlete

/**
 * 
 * @param resourceState Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
 * @param firstname The athlete's first name.
 * @param lastname The athlete's last name.
 * @param profileMedium URL to a 62x62 pixel profile picture.
 * @param profile URL to a 124x124 pixel profile picture.
 * @param city The athlete's city.
 * @param state The athlete's state or geographical region.
 * @param country The athlete's country.
 * @param sex The athlete's sex.
 * @param premium Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
 * @param summit Whether the athlete has any Summit subscription.
 * @param createdAt The time at which the athlete was created.
 * @param updatedAt The time at which the athlete was last updated.
 */
data class SummaryAthlete (

    /* Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\" */
    val resourceState: kotlin.Int? = null,
    /* The athlete's first name. */
    val firstname: kotlin.String? = null,
    /* The athlete's last name. */
    val lastname: kotlin.String? = null,
    /* URL to a 62x62 pixel profile picture. */
    val profileMedium: kotlin.String? = null,
    /* URL to a 124x124 pixel profile picture. */
    val profile: kotlin.String? = null,
    /* The athlete's city. */
    val city: kotlin.String? = null,
    /* The athlete's state or geographical region. */
    val state: kotlin.String? = null,
    /* The athlete's country. */
    val country: kotlin.String? = null,
    /* The athlete's sex. */
    val sex: SummaryAthlete.Sex? = null,
    /* Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription. */
    val premium: kotlin.Boolean? = null,
    /* Whether the athlete has any Summit subscription. */
    val summit: kotlin.Boolean? = null,
    /* The time at which the athlete was created. */
    val createdAt: java.time.LocalDateTime? = null,
    /* The time at which the athlete was last updated. */
    val updatedAt: java.time.LocalDateTime? = null,
    /* The unique identifier of the athlete */
    val id: kotlin.Int? = null,
    /* Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\" */
    val resourceState: kotlin.Int? = null,
    /* The athlete's first name. */
    val firstname: kotlin.String? = null,
    /* The athlete's last name. */
    val lastname: kotlin.String? = null,
    /* URL to a 62x62 pixel profile picture. */
    val profileMedium: kotlin.String? = null,
    /* URL to a 124x124 pixel profile picture. */
    val profile: kotlin.String? = null,
    /* The athlete's city. */
    val city: kotlin.String? = null,
    /* The athlete's state or geographical region. */
    val state: kotlin.String? = null,
    /* The athlete's country. */
    val country: kotlin.String? = null,
    /* The athlete's sex. */
    val sex: SummaryAthlete.Sex? = null,
    /* Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription. */
    val premium: kotlin.Boolean? = null,
    /* Whether the athlete has any Summit subscription. */
    val summit: kotlin.Boolean? = null,
    /* The time at which the athlete was created. */
    val createdAt: java.time.LocalDateTime? = null,
    /* The time at which the athlete was last updated. */
    val updatedAt: java.time.LocalDateTime? = null
) {
    /**
    * The athlete's sex.
    * Values: m,f
    */
    enum class Sex(val value: kotlin.String){
        m("M"),
        f("F");
    }
}