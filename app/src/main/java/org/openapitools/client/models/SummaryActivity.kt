/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* The version of the OpenAPI document: 3.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.ActivityType
import org.openapitools.client.models.MetaActivity
import org.openapitools.client.models.MetaAthlete
import org.openapitools.client.models.PolylineMap
import org.openapitools.client.models.SummaryActivityAllOf

import com.squareup.moshi.Json
/**
 * 
 * @param id The unique identifier of the activity
 * @param externalId The identifier provided at upload time
 * @param uploadId The identifier of the upload that resulted in this activity
 * @param athlete 
 * @param name The name of the activity
 * @param distance The activity's distance, in meters
 * @param movingTime The activity's moving time, in seconds
 * @param elapsedTime The activity's elapsed time, in seconds
 * @param totalElevationGain The activity's total elevation gain.
 * @param elevHigh The activity's highest elevation, in meters
 * @param elevLow The activity's lowest elevation, in meters
 * @param type 
 * @param startDate The time at which the activity was started.
 * @param startDateLocal The time at which the activity was started in the local timezone.
 * @param timezone The timezone of the activity
 * @param startLatlng A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
 * @param endLatlng A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
 * @param achievementCount The number of achievements gained during this activity
 * @param kudosCount The number of kudos given for this activity
 * @param commentCount The number of comments for this activity
 * @param athleteCount The number of athletes for taking part in a group activity
 * @param photoCount The number of Instagram photos for this activity
 * @param totalPhotoCount The number of Instagram and Strava photos for this activity
 * @param map 
 * @param trainer Whether this activity was recorded on a training machine
 * @param commute Whether this activity is a commute
 * @param manual Whether this activity was created manually
 * @param private Whether this activity is private
 * @param flagged Whether this activity is flagged
 * @param workoutType The activity's workout type
 * @param uploadIdStr The unique identifier of the upload in string format
 * @param averageSpeed The activity's average speed, in meters per second
 * @param maxSpeed The activity's max speed, in meters per second
 * @param hasKudoed Whether the logged-in athlete has kudoed this activity
 * @param gearId The id of the gear for the activity
 * @param kilojoules The total work done in kilojoules during this activity. Rides only
 * @param averageWatts Average power output in watts during this activity. Rides only
 * @param deviceWatts Whether the watts are from a power meter, false if estimated
 * @param maxWatts Rides with power meter data only
 * @param weightedAverageWatts Similar to Normalized Power. Rides with power meter data only
 */

data class SummaryActivity (
    /* The unique identifier of the activity */
    @Json(name = "id")
    val id: kotlin.Long? = null,
    /* The identifier provided at upload time */
    @Json(name = "external_id")
    val externalId: kotlin.String? = null,
    /* The identifier of the upload that resulted in this activity */
    @Json(name = "upload_id")
    val uploadId: kotlin.Long? = null,
    @Json(name = "athlete")
    val athlete: MetaAthlete? = null,
    /* The name of the activity */
    @Json(name = "name")
    val name: kotlin.String? = null,
    /* The activity's distance, in meters */
    @Json(name = "distance")
    val distance: kotlin.Float? = null,
    /* The activity's moving time, in seconds */
    @Json(name = "moving_time")
    val movingTime: kotlin.Int? = null,
    /* The activity's elapsed time, in seconds */
    @Json(name = "elapsed_time")
    val elapsedTime: kotlin.Int? = null,
    /* The activity's total elevation gain. */
    @Json(name = "total_elevation_gain")
    val totalElevationGain: kotlin.Float? = null,
    /* The activity's highest elevation, in meters */
    @Json(name = "elev_high")
    val elevHigh: kotlin.Float? = null,
    /* The activity's lowest elevation, in meters */
    @Json(name = "elev_low")
    val elevLow: kotlin.Float? = null,
    @Json(name = "type")
    val type: ActivityType? = null,
    /* The time at which the activity was started. */
    @Json(name = "start_date")
    val startDate: java.time.OffsetDateTime? = null,
    /* The time at which the activity was started in the local timezone. */
    @Json(name = "start_date_local")
    val startDateLocal: java.time.OffsetDateTime? = null,
    /* The timezone of the activity */
    @Json(name = "timezone")
    val timezone: kotlin.String? = null,
    /* A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. */
    @Json(name = "start_latlng")
    val startLatlng: kotlin.Array<kotlin.Float>? = null,
    /* A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. */
    @Json(name = "end_latlng")
    val endLatlng: kotlin.Array<kotlin.Float>? = null,
    /* The number of achievements gained during this activity */
    @Json(name = "achievement_count")
    val achievementCount: kotlin.Int? = null,
    /* The number of kudos given for this activity */
    @Json(name = "kudos_count")
    val kudosCount: kotlin.Int? = null,
    /* The number of comments for this activity */
    @Json(name = "comment_count")
    val commentCount: kotlin.Int? = null,
    /* The number of athletes for taking part in a group activity */
    @Json(name = "athlete_count")
    val athleteCount: kotlin.Int? = null,
    /* The number of Instagram photos for this activity */
    @Json(name = "photo_count")
    val photoCount: kotlin.Int? = null,
    /* The number of Instagram and Strava photos for this activity */
    @Json(name = "total_photo_count")
    val totalPhotoCount: kotlin.Int? = null,
    @Json(name = "map")
    val map: PolylineMap? = null,
    /* Whether this activity was recorded on a training machine */
    @Json(name = "trainer")
    val trainer: kotlin.Boolean? = null,
    /* Whether this activity is a commute */
    @Json(name = "commute")
    val commute: kotlin.Boolean? = null,
    /* Whether this activity was created manually */
    @Json(name = "manual")
    val manual: kotlin.Boolean? = null,
    /* Whether this activity is private */
    @Json(name = "private")
    val private: kotlin.Boolean? = null,
    /* Whether this activity is flagged */
    @Json(name = "flagged")
    val flagged: kotlin.Boolean? = null,
    /* The activity's workout type */
    @Json(name = "workout_type")
    val workoutType: kotlin.Int? = null,
    /* The unique identifier of the upload in string format */
    @Json(name = "upload_id_str")
    val uploadIdStr: kotlin.String? = null,
    /* The activity's average speed, in meters per second */
    @Json(name = "average_speed")
    val averageSpeed: kotlin.Float? = null,
    /* The activity's max speed, in meters per second */
    @Json(name = "max_speed")
    val maxSpeed: kotlin.Float? = null,
    /* Whether the logged-in athlete has kudoed this activity */
    @Json(name = "has_kudoed")
    val hasKudoed: kotlin.Boolean? = null,
    /* The id of the gear for the activity */
    @Json(name = "gear_id")
    val gearId: kotlin.String? = null,
    /* The total work done in kilojoules during this activity. Rides only */
    @Json(name = "kilojoules")
    val kilojoules: kotlin.Float? = null,
    /* Average power output in watts during this activity. Rides only */
    @Json(name = "average_watts")
    val averageWatts: kotlin.Float? = null,
    /* Whether the watts are from a power meter, false if estimated */
    @Json(name = "device_watts")
    val deviceWatts: kotlin.Boolean? = null,
    /* Rides with power meter data only */
    @Json(name = "max_watts")
    val maxWatts: kotlin.Int? = null,
    /* Similar to Normalized Power. Rides with power meter data only */
    @Json(name = "weighted_average_watts")
    val weightedAverageWatts: kotlin.Int? = null
)

