/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* The version of the OpenAPI document: 3.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.MetaActivity
import org.openapitools.client.models.MetaAthlete

import com.squareup.moshi.Json
/**
 * 
 * @param id The unique identifier of this lap
 * @param activity 
 * @param athlete 
 * @param averageCadence The lap's average cadence
 * @param averageSpeed The lap's average speed
 * @param distance The lap's distance, in meters
 * @param elapsedTime The lap's elapsed time, in seconds
 * @param startIndex The start index of this effort in its activity's stream
 * @param endIndex The end index of this effort in its activity's stream
 * @param lapIndex The index of this lap in the activity it belongs to
 * @param maxSpeed The maximum speed of this lat, in meters per second
 * @param movingTime The lap's moving time, in seconds
 * @param name The name of the lap
 * @param paceZone The athlete's pace zone during this lap
 * @param split 
 * @param startDate The time at which the lap was started.
 * @param startDateLocal The time at which the lap was started in the local timezone.
 * @param totalElevationGain The elevation gain of this lap, in meters
 */

data class Lap (
    /* The unique identifier of this lap */
    @Json(name = "id")
    val id: kotlin.Long? = null,
    @Json(name = "activity")
    val activity: MetaActivity? = null,
    @Json(name = "athlete")
    val athlete: MetaAthlete? = null,
    /* The lap's average cadence */
    @Json(name = "average_cadence")
    val averageCadence: kotlin.Float? = null,
    /* The lap's average speed */
    @Json(name = "average_speed")
    val averageSpeed: kotlin.Float? = null,
    /* The lap's distance, in meters */
    @Json(name = "distance")
    val distance: kotlin.Float? = null,
    /* The lap's elapsed time, in seconds */
    @Json(name = "elapsed_time")
    val elapsedTime: kotlin.Int? = null,
    /* The start index of this effort in its activity's stream */
    @Json(name = "start_index")
    val startIndex: kotlin.Int? = null,
    /* The end index of this effort in its activity's stream */
    @Json(name = "end_index")
    val endIndex: kotlin.Int? = null,
    /* The index of this lap in the activity it belongs to */
    @Json(name = "lap_index")
    val lapIndex: kotlin.Int? = null,
    /* The maximum speed of this lat, in meters per second */
    @Json(name = "max_speed")
    val maxSpeed: kotlin.Float? = null,
    /* The lap's moving time, in seconds */
    @Json(name = "moving_time")
    val movingTime: kotlin.Int? = null,
    /* The name of the lap */
    @Json(name = "name")
    val name: kotlin.String? = null,
    /* The athlete's pace zone during this lap */
    @Json(name = "pace_zone")
    val paceZone: kotlin.Int? = null,
    @Json(name = "split")
    val split: kotlin.Int? = null,
    /* The time at which the lap was started. */
    @Json(name = "start_date")
    val startDate: java.time.OffsetDateTime? = null,
    /* The time at which the lap was started in the local timezone. */
    @Json(name = "start_date_local")
    val startDateLocal: java.time.OffsetDateTime? = null,
    /* The elevation gain of this lap, in meters */
    @Json(name = "total_elevation_gain")
    val totalElevationGain: kotlin.Float? = null
)

