/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* The version of the OpenAPI document: 3.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models


import com.squareup.moshi.Json
/**
 * 
 * @param id The unique identifier of this race.
 * @param name The name of this race.
 * @param runningRaceType The type of this race.
 * @param distance The race's distance, in meters.
 * @param startDateLocal The time at which the race begins started in the local timezone.
 * @param city The name of the city in which the race is taking place.
 * @param state The name of the state or geographical region in which the race is taking place.
 * @param country The name of the country in which the race is taking place.
 * @param routeIds The set of routes that cover this race's course.
 * @param measurementPreference The unit system in which the race should be displayed.
 * @param url The vanity URL of this race on Strava.
 * @param websiteUrl The URL of this race's website.
 */

data class RunningRace (
    /* The unique identifier of this race. */
    @Json(name = "id")
    val id: kotlin.Long? = null,
    /* The name of this race. */
    @Json(name = "name")
    val name: kotlin.String? = null,
    /* The type of this race. */
    @Json(name = "running_race_type")
    val runningRaceType: kotlin.Int? = null,
    /* The race's distance, in meters. */
    @Json(name = "distance")
    val distance: kotlin.Float? = null,
    /* The time at which the race begins started in the local timezone. */
    @Json(name = "start_date_local")
    val startDateLocal: java.time.OffsetDateTime? = null,
    /* The name of the city in which the race is taking place. */
    @Json(name = "city")
    val city: kotlin.String? = null,
    /* The name of the state or geographical region in which the race is taking place. */
    @Json(name = "state")
    val state: kotlin.String? = null,
    /* The name of the country in which the race is taking place. */
    @Json(name = "country")
    val country: kotlin.String? = null,
    /* The set of routes that cover this race's course. */
    @Json(name = "route_ids")
    val routeIds: kotlin.Array<kotlin.Long>? = null,
    /* The unit system in which the race should be displayed. */
    @Json(name = "measurement_preference")
    val measurementPreference: RunningRace.MeasurementPreference? = null,
    /* The vanity URL of this race on Strava. */
    @Json(name = "url")
    val url: kotlin.String? = null,
    /* The URL of this race's website. */
    @Json(name = "website_url")
    val websiteUrl: kotlin.String? = null
) {

    /**
    * The unit system in which the race should be displayed.
    * Values: feet,meters
    */
    
    enum class MeasurementPreference(val value: kotlin.String){
        @Json(name = "feet") feet("feet"),
        @Json(name = "meters") meters("meters");
    }
}

