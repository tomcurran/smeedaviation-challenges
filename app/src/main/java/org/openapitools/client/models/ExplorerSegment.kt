/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* The version of the OpenAPI document: 3.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models


import com.squareup.moshi.Json
/**
 * 
 * @param id The unique identifier of this segment
 * @param name The name of this segment
 * @param climbCategory The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3.
 * @param climbCategoryDesc The description for the category of the climb
 * @param avgGrade The segment's average grade, in percents
 * @param startLatlng A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
 * @param endLatlng A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
 * @param elevDifference The segments's evelation difference, in meters
 * @param distance The segment's distance, in meters
 * @param points The polyline of the segment
 */

data class ExplorerSegment (
    /* The unique identifier of this segment */
    @Json(name = "id")
    val id: kotlin.Long? = null,
    /* The name of this segment */
    @Json(name = "name")
    val name: kotlin.String? = null,
    /* The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3. */
    @Json(name = "climb_category")
    val climbCategory: kotlin.Int? = null,
    /* The description for the category of the climb */
    @Json(name = "climb_category_desc")
    val climbCategoryDesc: ExplorerSegment.ClimbCategoryDesc? = null,
    /* The segment's average grade, in percents */
    @Json(name = "avg_grade")
    val avgGrade: kotlin.Float? = null,
    /* A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. */
    @Json(name = "start_latlng")
    val startLatlng: kotlin.Array<kotlin.Float>? = null,
    /* A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. */
    @Json(name = "end_latlng")
    val endLatlng: kotlin.Array<kotlin.Float>? = null,
    /* The segments's evelation difference, in meters */
    @Json(name = "elev_difference")
    val elevDifference: kotlin.Float? = null,
    /* The segment's distance, in meters */
    @Json(name = "distance")
    val distance: kotlin.Float? = null,
    /* The polyline of the segment */
    @Json(name = "points")
    val points: kotlin.String? = null
) {

    /**
    * The description for the category of the climb
    * Values: nC,_4,_3,_2,_1,hC
    */
    
    enum class ClimbCategoryDesc(val value: kotlin.String){
        @Json(name = "NC") nC("NC"),
        @Json(name = "4") _4("4"),
        @Json(name = "3") _3("3"),
        @Json(name = "2") _2("2"),
        @Json(name = "1") _1("1"),
        @Json(name = "HC") hC("HC");
    }
}

