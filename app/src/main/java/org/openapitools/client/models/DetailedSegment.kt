/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* The version of the OpenAPI document: 3.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.DetailedSegmentAllOf
import org.openapitools.client.models.PolylineMap
import org.openapitools.client.models.SummarySegment
import org.openapitools.client.models.SummarySegmentEffort

import com.squareup.moshi.Json
/**
 * 
 * @param id The unique identifier of this segment
 * @param name The name of this segment
 * @param activityType 
 * @param distance The segment's distance, in meters
 * @param averageGrade The segment's average grade, in percents
 * @param maximumGrade The segments's maximum grade, in percents
 * @param elevationHigh The segments's highest elevation, in meters
 * @param elevationLow The segments's lowest elevation, in meters
 * @param startLatlng A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
 * @param endLatlng A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
 * @param climbCategory The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.
 * @param city The segments's city.
 * @param state The segments's state or geographical region.
 * @param country The segment's country.
 * @param private Whether this segment is private.
 * @param athletePrEffort 
 * @param createdAt The time at which the segment was created.
 * @param updatedAt The time at which the segment was last updated.
 * @param totalElevationGain The segment's total elevation gain.
 * @param map 
 * @param effortCount The total number of efforts for this segment
 * @param athleteCount The number of unique athletes who have an effort for this segment
 * @param hazardous Whether this segment is considered hazardous
 * @param starCount The number of stars for this segment
 */

data class DetailedSegment (
    /* The unique identifier of this segment */
    @Json(name = "id")
    val id: kotlin.Long? = null,
    /* The name of this segment */
    @Json(name = "name")
    val name: kotlin.String? = null,
    @Json(name = "activity_type")
    val activityType: DetailedSegment.ActivityType? = null,
    /* The segment's distance, in meters */
    @Json(name = "distance")
    val distance: kotlin.Float? = null,
    /* The segment's average grade, in percents */
    @Json(name = "average_grade")
    val averageGrade: kotlin.Float? = null,
    /* The segments's maximum grade, in percents */
    @Json(name = "maximum_grade")
    val maximumGrade: kotlin.Float? = null,
    /* The segments's highest elevation, in meters */
    @Json(name = "elevation_high")
    val elevationHigh: kotlin.Float? = null,
    /* The segments's lowest elevation, in meters */
    @Json(name = "elevation_low")
    val elevationLow: kotlin.Float? = null,
    /* A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. */
    @Json(name = "start_latlng")
    val startLatlng: kotlin.Array<kotlin.Float>? = null,
    /* A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. */
    @Json(name = "end_latlng")
    val endLatlng: kotlin.Array<kotlin.Float>? = null,
    /* The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. */
    @Json(name = "climb_category")
    val climbCategory: kotlin.Int? = null,
    /* The segments's city. */
    @Json(name = "city")
    val city: kotlin.String? = null,
    /* The segments's state or geographical region. */
    @Json(name = "state")
    val state: kotlin.String? = null,
    /* The segment's country. */
    @Json(name = "country")
    val country: kotlin.String? = null,
    /* Whether this segment is private. */
    @Json(name = "private")
    val private: kotlin.Boolean? = null,
    @Json(name = "athlete_pr_effort")
    val athletePrEffort: SummarySegmentEffort? = null,
    /* The time at which the segment was created. */
    @Json(name = "created_at")
    val createdAt: java.time.OffsetDateTime? = null,
    /* The time at which the segment was last updated. */
    @Json(name = "updated_at")
    val updatedAt: java.time.OffsetDateTime? = null,
    /* The segment's total elevation gain. */
    @Json(name = "total_elevation_gain")
    val totalElevationGain: kotlin.Float? = null,
    @Json(name = "map")
    val map: PolylineMap? = null,
    /* The total number of efforts for this segment */
    @Json(name = "effort_count")
    val effortCount: kotlin.Int? = null,
    /* The number of unique athletes who have an effort for this segment */
    @Json(name = "athlete_count")
    val athleteCount: kotlin.Int? = null,
    /* Whether this segment is considered hazardous */
    @Json(name = "hazardous")
    val hazardous: kotlin.Boolean? = null,
    /* The number of stars for this segment */
    @Json(name = "star_count")
    val starCount: kotlin.Int? = null
) {

    /**
    * 
    * Values: ride,run
    */
    
    enum class ActivityType(val value: kotlin.String){
        @Json(name = "Ride") ride("Ride"),
        @Json(name = "Run") run("Run");
    }
}

