/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* The version of the OpenAPI document: 3.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.TimedZoneRange

import com.squareup.moshi.Json
/**
 * 
 * @param score 
 * @param distributionBuckets Stores the exclusive ranges representing zones and the time spent in each.
 * @param type 
 * @param sensorBased 
 * @param points 
 * @param customZones 
 * @param max 
 */

data class ActivityZone (
    @Json(name = "score")
    val score: kotlin.Int? = null,
    /* Stores the exclusive ranges representing zones and the time spent in each. */
    @Json(name = "distribution_buckets")
    val distributionBuckets: kotlin.Array<TimedZoneRange>? = null,
    @Json(name = "type")
    val type: ActivityZone.Type? = null,
    @Json(name = "sensor_based")
    val sensorBased: kotlin.Boolean? = null,
    @Json(name = "points")
    val points: kotlin.Int? = null,
    @Json(name = "custom_zones")
    val customZones: kotlin.Boolean? = null,
    @Json(name = "max")
    val max: kotlin.Int? = null
) {

    /**
    * 
    * Values: heartrate,power
    */
    
    enum class Type(val value: kotlin.String){
        @Json(name = "heartrate") heartrate("heartrate"),
        @Json(name = "power") power("power");
    }
}

