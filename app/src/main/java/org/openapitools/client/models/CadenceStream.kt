/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* The version of the OpenAPI document: 3.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.BaseStream
import org.openapitools.client.models.CadenceStreamAllOf

import com.squareup.moshi.Json
/**
 * 
 * @param originalSize The number of data points in this stream
 * @param resolution The level of detail (sampling) in which this stream was returned
 * @param seriesType The base series used in the case the stream was downsampled
 * @param data The sequence of cadence values for this stream, in rotations per minute
 */

data class CadenceStream (
    /* The number of data points in this stream */
    @Json(name = "original_size")
    val originalSize: kotlin.Int? = null,
    /* The level of detail (sampling) in which this stream was returned */
    @Json(name = "resolution")
    val resolution: CadenceStream.Resolution? = null,
    /* The base series used in the case the stream was downsampled */
    @Json(name = "series_type")
    val seriesType: CadenceStream.SeriesType? = null,
    /* The sequence of cadence values for this stream, in rotations per minute */
    @Json(name = "data")
    val data: kotlin.Array<kotlin.Int>? = null
) {

    /**
    * The level of detail (sampling) in which this stream was returned
    * Values: low,medium,high
    */
    
    enum class Resolution(val value: kotlin.String){
        @Json(name = "low") low("low"),
        @Json(name = "medium") medium("medium"),
        @Json(name = "high") high("high");
    }
    /**
    * The base series used in the case the stream was downsampled
    * Values: distance,time
    */
    
    enum class SeriesType(val value: kotlin.String){
        @Json(name = "distance") distance("distance"),
        @Json(name = "time") time("time");
    }
}

