/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* The version of the OpenAPI document: 3.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.DetailedAthleteAllOf
import org.openapitools.client.models.SummaryAthlete
import org.openapitools.client.models.SummaryClub
import org.openapitools.client.models.SummaryGear

import com.squareup.moshi.Json
/**
 * 
 * @param id The unique identifier of the athlete
 * @param resourceState Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
 * @param firstname The athlete's first name.
 * @param lastname The athlete's last name.
 * @param profileMedium URL to a 62x62 pixel profile picture.
 * @param profile URL to a 124x124 pixel profile picture.
 * @param city The athlete's city.
 * @param state The athlete's state or geographical region.
 * @param country The athlete's country.
 * @param sex The athlete's sex.
 * @param premium Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
 * @param summit Whether the athlete has any Summit subscription.
 * @param createdAt The time at which the athlete was created.
 * @param updatedAt The time at which the athlete was last updated.
 * @param followerCount The athlete's follower count.
 * @param friendCount The athlete's friend count.
 * @param measurementPreference The athlete's preferred unit system.
 * @param ftp The athlete's FTP (Functional Threshold Power).
 * @param weight The athlete's weight.
 * @param clubs The athlete's clubs.
 * @param bikes The athlete's bikes.
 * @param shoes The athlete's shoes.
 */

data class DetailedAthlete (
    /* The unique identifier of the athlete */
    @Json(name = "id")
    val id: kotlin.Long? = null,
    /* Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\" */
    @Json(name = "resource_state")
    val resourceState: kotlin.Int? = null,
    /* The athlete's first name. */
    @Json(name = "firstname")
    val firstname: kotlin.String? = null,
    /* The athlete's last name. */
    @Json(name = "lastname")
    val lastname: kotlin.String? = null,
    /* URL to a 62x62 pixel profile picture. */
    @Json(name = "profile_medium")
    val profileMedium: kotlin.String? = null,
    /* URL to a 124x124 pixel profile picture. */
    @Json(name = "profile")
    val profile: kotlin.String? = null,
    /* The athlete's city. */
    @Json(name = "city")
    val city: kotlin.String? = null,
    /* The athlete's state or geographical region. */
    @Json(name = "state")
    val state: kotlin.String? = null,
    /* The athlete's country. */
    @Json(name = "country")
    val country: kotlin.String? = null,
    /* The athlete's sex. */
    @Json(name = "sex")
    val sex: DetailedAthlete.Sex? = null,
    /* Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription. */
    @Json(name = "premium")
    val premium: kotlin.Boolean? = null,
    /* Whether the athlete has any Summit subscription. */
    @Json(name = "summit")
    val summit: kotlin.Boolean? = null,
    /* The time at which the athlete was created. */
    @Json(name = "created_at")
    val createdAt: java.time.OffsetDateTime? = null,
    /* The time at which the athlete was last updated. */
    @Json(name = "updated_at")
    val updatedAt: java.time.OffsetDateTime? = null,
    /* The athlete's follower count. */
    @Json(name = "follower_count")
    val followerCount: kotlin.Int? = null,
    /* The athlete's friend count. */
    @Json(name = "friend_count")
    val friendCount: kotlin.Int? = null,
    /* The athlete's preferred unit system. */
    @Json(name = "measurement_preference")
    val measurementPreference: DetailedAthlete.MeasurementPreference? = null,
    /* The athlete's FTP (Functional Threshold Power). */
    @Json(name = "ftp")
    val ftp: kotlin.Int? = null,
    /* The athlete's weight. */
    @Json(name = "weight")
    val weight: kotlin.Float? = null,
    /* The athlete's clubs. */
    @Json(name = "clubs")
    val clubs: kotlin.Array<SummaryClub>? = null,
    /* The athlete's bikes. */
    @Json(name = "bikes")
    val bikes: kotlin.Array<SummaryGear>? = null,
    /* The athlete's shoes. */
    @Json(name = "shoes")
    val shoes: kotlin.Array<SummaryGear>? = null
) {

    /**
    * The athlete's sex.
    * Values: m,f
    */
    
    enum class Sex(val value: kotlin.String){
        @Json(name = "M") m("M"),
        @Json(name = "F") f("F");
    }
    /**
    * The athlete's preferred unit system.
    * Values: feet,meters
    */
    
    enum class MeasurementPreference(val value: kotlin.String){
        @Json(name = "feet") feet("feet"),
        @Json(name = "meters") meters("meters");
    }
}

